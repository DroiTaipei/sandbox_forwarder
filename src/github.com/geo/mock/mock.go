// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DroiTaipei/droipkg/geo/protobuf (interfaces: GeoClient)

// Package mock_protobuf is a generated GoMock package.
package mock_protobuf

import (
	protobuf "github.com/DroiTaipei/droipkg/geo/protobuf"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockGeoClient is a mock of GeoClient interface
type MockGeoClient struct {
	ctrl     *gomock.Controller
	recorder *MockGeoClientMockRecorder
}

// MockGeoClientMockRecorder is the mock recorder for MockGeoClient
type MockGeoClientMockRecorder struct {
	mock *MockGeoClient
}

// NewMockGeoClient creates a new mock instance
func NewMockGeoClient(ctrl *gomock.Controller) *MockGeoClient {
	mock := &MockGeoClient{ctrl: ctrl}
	mock.recorder = &MockGeoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGeoClient) EXPECT() *MockGeoClientMockRecorder {
	return m.recorder
}

// Echo mocks base method
func (m *MockGeoClient) Echo(arg0 context.Context, arg1 *protobuf.Content, arg2 ...grpc.CallOption) (*protobuf.Content, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Echo", varargs...)
	ret0, _ := ret[0].(*protobuf.Content)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo
func (mr *MockGeoClientMockRecorder) Echo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockGeoClient)(nil).Echo), varargs...)
}

// GetIpipCity mocks base method
func (m *MockGeoClient) GetIpipCity(arg0 context.Context, arg1 *protobuf.IP, arg2 ...grpc.CallOption) (*protobuf.IpipCityInfo, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIpipCity", varargs...)
	ret0, _ := ret[0].(*protobuf.IpipCityInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIpipCity indicates an expected call of GetIpipCity
func (mr *MockGeoClientMockRecorder) GetIpipCity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIpipCity", reflect.TypeOf((*MockGeoClient)(nil).GetIpipCity), varargs...)
}

// GetMaxmindCity mocks base method
func (m *MockGeoClient) GetMaxmindCity(arg0 context.Context, arg1 *protobuf.IP, arg2 ...grpc.CallOption) (*protobuf.MaxmindCityInfo, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaxmindCity", varargs...)
	ret0, _ := ret[0].(*protobuf.MaxmindCityInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxmindCity indicates an expected call of GetMaxmindCity
func (mr *MockGeoClientMockRecorder) GetMaxmindCity(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxmindCity", reflect.TypeOf((*MockGeoClient)(nil).GetMaxmindCity), varargs...)
}
